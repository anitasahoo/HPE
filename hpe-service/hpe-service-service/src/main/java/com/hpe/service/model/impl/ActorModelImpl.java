/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.hpe.service.model.impl;

import com.hpe.service.model.Actor;
import com.hpe.service.model.ActorModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Actor service. Represents a row in the &quot;HPE_Actor&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ActorModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ActorImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ActorImpl
 * @generated
 */
public class ActorModelImpl extends BaseModelImpl<Actor> implements ActorModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a actor model instance should use the <code>Actor</code> interface instead.
	 */
	public static final String TABLE_NAME = "HPE_Actor";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"actorId", Types.BIGINT},
		{"actorName", Types.VARCHAR}, {"age", Types.INTEGER},
		{"languages", Types.VARCHAR}, {"movies", Types.VARCHAR},
		{"criticRating", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("actorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("actorName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("age", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("languages", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("movies", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("criticRating", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table HPE_Actor (uuid_ VARCHAR(75) null,actorId LONG not null primary key,actorName VARCHAR(75) null,age INTEGER,languages VARCHAR(75) null,movies VARCHAR(75) null,criticRating INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table HPE_Actor";

	public static final String ORDER_BY_JPQL = " ORDER BY actor.actorId ASC";

	public static final String ORDER_BY_SQL = " ORDER BY HPE_Actor.actorId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long UUID_COLUMN_BITMASK = 1L;

	public static final long ACTORID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public ActorModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _actorId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setActorId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _actorId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Actor.class;
	}

	@Override
	public String getModelClassName() {
		return Actor.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Actor, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Actor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Actor, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Actor)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Actor, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Actor, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Actor)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Actor, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Actor, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Actor>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Actor.class.getClassLoader(), Actor.class, ModelWrapper.class);

		try {
			Constructor<Actor> constructor =
				(Constructor<Actor>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Actor, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Actor, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Actor, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Actor, Object>>();
		Map<String, BiConsumer<Actor, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Actor, ?>>();

		attributeGetterFunctions.put("uuid", Actor::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Actor, String>)Actor::setUuid);
		attributeGetterFunctions.put("actorId", Actor::getActorId);
		attributeSetterBiConsumers.put(
			"actorId", (BiConsumer<Actor, Long>)Actor::setActorId);
		attributeGetterFunctions.put("actorName", Actor::getActorName);
		attributeSetterBiConsumers.put(
			"actorName", (BiConsumer<Actor, String>)Actor::setActorName);
		attributeGetterFunctions.put("age", Actor::getAge);
		attributeSetterBiConsumers.put(
			"age", (BiConsumer<Actor, Integer>)Actor::setAge);
		attributeGetterFunctions.put("languages", Actor::getLanguages);
		attributeSetterBiConsumers.put(
			"languages", (BiConsumer<Actor, String>)Actor::setLanguages);
		attributeGetterFunctions.put("movies", Actor::getMovies);
		attributeSetterBiConsumers.put(
			"movies", (BiConsumer<Actor, String>)Actor::setMovies);
		attributeGetterFunctions.put("criticRating", Actor::getCriticRating);
		attributeSetterBiConsumers.put(
			"criticRating", (BiConsumer<Actor, Integer>)Actor::setCriticRating);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getActorId() {
		return _actorId;
	}

	@Override
	public void setActorId(long actorId) {
		_actorId = actorId;
	}

	@Override
	public String getActorName() {
		if (_actorName == null) {
			return "";
		}
		else {
			return _actorName;
		}
	}

	@Override
	public void setActorName(String actorName) {
		_actorName = actorName;
	}

	@Override
	public int getAge() {
		return _age;
	}

	@Override
	public void setAge(int age) {
		_age = age;
	}

	@Override
	public String getLanguages() {
		if (_languages == null) {
			return "";
		}
		else {
			return _languages;
		}
	}

	@Override
	public void setLanguages(String languages) {
		_languages = languages;
	}

	@Override
	public String getMovies() {
		if (_movies == null) {
			return "";
		}
		else {
			return _movies;
		}
	}

	@Override
	public void setMovies(String movies) {
		_movies = movies;
	}

	@Override
	public int getCriticRating() {
		return _criticRating;
	}

	@Override
	public void setCriticRating(int criticRating) {
		_criticRating = criticRating;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Actor.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Actor toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Actor>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ActorImpl actorImpl = new ActorImpl();

		actorImpl.setUuid(getUuid());
		actorImpl.setActorId(getActorId());
		actorImpl.setActorName(getActorName());
		actorImpl.setAge(getAge());
		actorImpl.setLanguages(getLanguages());
		actorImpl.setMovies(getMovies());
		actorImpl.setCriticRating(getCriticRating());

		actorImpl.resetOriginalValues();

		return actorImpl;
	}

	@Override
	public int compareTo(Actor actor) {
		long primaryKey = actor.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Actor)) {
			return false;
		}

		Actor actor = (Actor)obj;

		long primaryKey = actor.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		ActorModelImpl actorModelImpl = this;

		actorModelImpl._originalUuid = actorModelImpl._uuid;

		actorModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Actor> toCacheModel() {
		ActorCacheModel actorCacheModel = new ActorCacheModel();

		actorCacheModel.uuid = getUuid();

		String uuid = actorCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			actorCacheModel.uuid = null;
		}

		actorCacheModel.actorId = getActorId();

		actorCacheModel.actorName = getActorName();

		String actorName = actorCacheModel.actorName;

		if ((actorName != null) && (actorName.length() == 0)) {
			actorCacheModel.actorName = null;
		}

		actorCacheModel.age = getAge();

		actorCacheModel.languages = getLanguages();

		String languages = actorCacheModel.languages;

		if ((languages != null) && (languages.length() == 0)) {
			actorCacheModel.languages = null;
		}

		actorCacheModel.movies = getMovies();

		String movies = actorCacheModel.movies;

		if ((movies != null) && (movies.length() == 0)) {
			actorCacheModel.movies = null;
		}

		actorCacheModel.criticRating = getCriticRating();

		return actorCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Actor, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Actor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Actor, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Actor)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Actor, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Actor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Actor, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Actor)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Actor>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _actorId;
	private String _actorName;
	private int _age;
	private String _languages;
	private String _movies;
	private int _criticRating;
	private long _columnBitmask;
	private Actor _escapedModel;

}